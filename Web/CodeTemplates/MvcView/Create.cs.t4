<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@using Web.Helpers
@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
#>
@Html.Partial("_BreadCumb", "Add <#= entitySetName#>"); 
@using (Html.BeginForm("Create", "<#= entitySetName#>", FormMethod.Post, new { @class = "form-materials" }))
{
    @Html.AntiForgeryToken()

	<div class="container">
		<div class="form-group">
			@Html.CustomValidationSummary()
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
if (property.IsPrimaryKey && IsPropertyGuid(property)) {
continue;
}
#>
			<div class="input-group">
<#
bool isCheckbox = property.TypeName.Equals(boolType);
if (property.IsForeignKey) {
#>
<#
if (isControlHtmlAttributesSupported) {
#>
				@Html.DropDownList("<#= property.PropertyName #>",(SelectList)ViewBag.<#= property.PropertyName #>, "Selecione um " + @Html.DisplayNameFor(model => model.<#= property.PropertyName #>), new { @class = "form-control" } )
<#
} else {
#>
				@Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
}
#>
<#
} else  if (isControlHtmlAttributesSupported) {
#>
<#
if (isCheckbox) {
#>
<#
PushIndent("    ");
#>
				@Html.TextBoxFor(model => model.<#= property.PropertyName #>, new { type = "text", required = "required", @class="form-control" })
<#
} else if (property.IsEnum && !property.IsEnumFlags) {
#>
				@Html.EnumDropDownListFor(model => model.<#= property.PropertyName #> )
<#
} else {
#>
				@Html.TextBoxFor(model => model.<#= property.PropertyName #>, new { type = "text", required = "required", @class="form-control"  })
<#
} 
} else {
#>
<#
if (property.IsForeignKey) {
#>
				@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)
<#
} else {
#>
				@Html.LabelFor(model => model.<#= property.PropertyName #>)
<#
}
#>
				@Html.TextBoxFor(model => model.<#= property.PropertyName #>, new { type = "text", required = "required", @class="form-control"  })
<#
}
#>
<# 
if (isControlHtmlAttributesSupported) {
#>
				@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
} else {
#>
				@Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
}
if (isCheckbox && isControlHtmlAttributesSupported) {
PopIndent();
#>
				</div>
<#
}
#>
			</div>
<#
}
}
#>
		</div>
	</div>

	@Html.Partial("_CreateEditFooter", "<#= entitySetName#>")
}
<#  ClearIndent(); #>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>